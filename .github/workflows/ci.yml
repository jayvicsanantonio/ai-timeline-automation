name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  NODE_VERSION: '22'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: dummy-openai-key
      GIT_TOKEN: dummy-git-token
      TIMELINE_REPO: owner/repo
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Type checking
        run: npm run typecheck

      - name: 📝 Lint code
        run: npm run lint

      - name: 🧪 Run tests
        run: npm run test:coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Comment coverage on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && success()
        with:
          script: |
            const fs = require('fs');
            const coveragePath = './coverage/coverage-summary.json';
            
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const formatPercent = (metric) => {
                return `${metric.pct.toFixed(1)}%`;
              };
              
              const comment = `## 📊 Coverage Report
              
              | Metric | Coverage |
              |--------|----------|
              | **Lines** | ${formatPercent(total.lines)} |
              | **Statements** | ${formatPercent(total.statements)} |
              | **Functions** | ${formatPercent(total.functions)} |
              | **Branches** | ${formatPercent(total.branches)} |
              
              _Coverage threshold: 80%_
              `;
              
              // Find existing comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Coverage Report')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: comment
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
              }
            }

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔐 Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🔍 Check for known vulnerabilities
        run: npx better-npm-audit audit
        continue-on-error: true

  validate-env:
    name: Validate Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for .env.example changes
        id: env_check
        run: |
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q ".env.example"; then
            echo "env_changed=true" >> $GITHUB_OUTPUT
          else
            echo "env_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 💬 Comment on PR if env changed
        if: steps.env_check.outputs.env_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `⚠️ **Environment Configuration Changed**
            
            The \`.env.example\` file has been modified in this PR. Please ensure:
            
            1. All new environment variables are documented in the README
            2. Any required secrets are added to the GitHub Actions workflow
            3. Default values are provided where appropriate
            4. The configuration changes are backward compatible
            
            **Action Required**: Update your local \`.env\` file with any new variables.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Matrix testing for multiple Node versions (optional)
  compatibility:
    name: Node ${{ matrix.node-version }} Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['22']
    env:
      OPENAI_API_KEY: dummy-openai-key
      GIT_TOKEN: dummy-git-token
      TIMELINE_REPO: owner/repo
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build
        run: npm run build

      - name: 🧪 Test
        run: npm test
